#ifndef __ACHIEVEMENTMANAGER_HOOKS_H__
#define __ACHIEVEMENTMANAGER_HOOKS_H__

#include <gd.h>
#include <dobby.h>
#include <dlfcn.h>

// Generated by macro 10/7/2023

namespace AchievementManager_Origins {
	void(*firstSetup)(AchievementManager*);
	void(*sharedState)(AchievementManager*);
	void(*resetAchievement)(AchievementManager*);
	void(*notifyAchievement)(AchievementManager*);
	void(*resetAchievements)(AchievementManager*);
	void(*getAllAchievements)(AchievementManager*);
	void(*percentageForCount)(AchievementManager*);
	void(*isAchievementEarned)(AchievementManager*);
	void(*areAchievementsEarned)(AchievementManager*);
	void(*percentForAchievement)(AchievementManager*);
	void(*setReportedAchievements)(AchievementManager*);
	void(*storeAchievementUnlocks)(AchievementManager*);
	bool(*init)(AchievementManager*);
	void(*setup)(AchievementManager*);
}
namespace AchievementManager_Hooks {
	void firstSetup(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager10firstSetupEv"), (void*)rep, (void**)&AchievementManager_Origins::firstSetup); }
	void sharedState(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager11sharedStateEv"), (void*)rep, (void**)&AchievementManager_Origins::sharedState); }
	void resetAchievement(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager16resetAchievementEPKc"), (void*)rep, (void**)&AchievementManager_Origins::resetAchievement); }
	void notifyAchievement(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager17notifyAchievementEPKcS1_S1_"), (void*)rep, (void**)&AchievementManager_Origins::notifyAchievement); }
	void resetAchievements(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager17resetAchievementsEv"), (void*)rep, (void**)&AchievementManager_Origins::resetAchievements); }
	void getAllAchievements(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager18getAllAchievementsEv"), (void*)rep, (void**)&AchievementManager_Origins::getAllAchievements); }
	void percentageForCount(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager18percentageForCountEii"), (void*)rep, (void**)&AchievementManager_Origins::percentageForCount); }
	void isAchievementEarned(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager19isAchievementEarnedEPKc"), (void*)rep, (void**)&AchievementManager_Origins::isAchievementEarned); }
	void areAchievementsEarned(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager21areAchievementsEarnedEPN7cocos2d7CCArrayE"), (void*)rep, (void**)&AchievementManager_Origins::areAchievementsEarned); }
	void percentForAchievement(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager21percentForAchievementEPKc"), (void*)rep, (void**)&AchievementManager_Origins::percentForAchievement); }
	void setReportedAchievements(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager23setReportedAchievementsEPN7cocos2d12CCDictionaryE"), (void*)rep, (void**)&AchievementManager_Origins::setReportedAchievements); }
	void storeAchievementUnlocks(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager23storeAchievementUnlocksEv"), (void*)rep, (void**)&AchievementManager_Origins::storeAchievementUnlocks); }
	void init(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager4initEv"), (void*)rep, (void**)&AchievementManager_Origins::init); }
	void setup(void* rep) { DobbyHook(dlsym(dlopen("libcocos2dcpp.so", RTLD_LAZY), "_ZN18AchievementManager5setupEv"), (void*)rep, (void**)&AchievementManager_Origins::setup); }
}
#endif